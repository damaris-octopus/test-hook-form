import Head from "next/head";

export default function Home() {
  return (
    <>
      <Head>
        <title>React Hook Form</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ul>
        <li>Simple form validation with React Hook Form.</li>
        <li>
          One of the key concepts in React Hook Form is to register your
          component into the hook. This will make its value available for both
          the form validation and submission. Note: Each field is required to
          have a name as a key for the registration process.
        </li>
        <li>
          React Hook Form makes form validation easy by aligning with the
          existing HTML standard for form validation. List of validation rules
          supported: required min max minLength maxLength pattern validate
        </li>
        <li>
          React Hook Form has made it easy to integrate with external UI
          component libraries.
        </li>

        <li>
          This library embraces uncontrolled components and native HTML inputs.
        </li>

        <li>
          Integrating Controlled Inputs is also possible by using a wrapper
          component, Controller, to streamline the integration process while
          still giving you the freedome to use a custom register
        </li>
        <li>
          React Hook Forms also supports schema-based form validation with Yup,
          Zod , Superstruct & Joi, where you can pass your schema to useForm as
          an optional config. It will validate your input data against the
          schema and return with either errors or a valid result.
        </li>
        <li>
          React Hook Form is built with TypeScript, and you can define a
          FormData type to support form values.
        </li>
      </ul>
    </>
  );
}
